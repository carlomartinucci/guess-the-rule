{"version":3,"sources":["Guess.module.css","Guess.js","AddGuess.js","App.js","serviceWorker.js","index.js","App.module.css"],"names":["module","exports","input","button","container","guess","right","wrong","Guess","props","_props$guess","Object","slicedToArray","a","b","c","react","className","styles","AddGuessContainer","state","setInput","letter","event","_this","setState","defineProperty","currentTarget","value","addGuess","AddGuess_AddGuess","assign","this","React","AddGuess","_ref","textInput","ref","autoFocus","type","onChange","onClick","current","focus","App","guesses","toConsumableArray","concat","map","i","src_Guess","key","src_AddGuess","Boolean","window","location","hostname","match","ReactDOM","render","react_default","createElement","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1c0b5e9f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Guess_input__JB4m_\",\"button\":\"Guess_button__1fwit\",\"container\":\"Guess_container__1lO--\",\"guess\":\"Guess_guess__2m7Z_\",\"right\":\"Guess_right__JUKx9\",\"wrong\":\"Guess_wrong__221JS\"};","// @flow\nimport * as React from 'react';\nimport styles from './Guess.module.css';\n\nexport type GuessType = [number, number, number, boolean];\n\ntype Props = {\n  guess: GuessType\n};\nconst Guess = (props: Props) => {\n  const [a, b, c, right] = props.guess\n\n  return <div className={styles.container}>\n    <div className={styles.guess}>{a}</div>\n    <div className={styles.guess}>{b}</div>\n    <div className={styles.guess}>{c}</div>\n    <div className={right ? styles.right : styles.wrong}>{right ? 'YES!' : 'NO :('}</div>\n  </div>\n}\n\nexport default Guess;\n","// @flow\nimport * as React from 'react';\nimport styles from './Guess.module.css';\n\ntype Props = {\n  addGuess: (a, b, c) => void\n};\n\ntype State = {\n  a: string,\n  b: string,\n  c: string\n};\n\nclass AddGuessContainer extends React.Component<Props, State> {\n  state = {\n    a: '',\n    b: '',\n    c: ''\n  }\n  setInput = (letter: string) => event => this.setState({ [letter]: event.currentTarget.value })\n  addGuess = event => {\n    if (this.state.a && this.state.b && this.state.c) {\n      this.props.addGuess(this.state.a, this.state.b, this.state.c)\n      this.setState({a: '', b: '', c: ''})\n    }\n  }\n\n  render() {\n    return <AddGuess setInput={this.setInput} addGuess={this.addGuess} {...this.state}/>\n  }\n}\n\nconst AddGuess = ({ a, b, c, setInput, addGuess }) => {\n  let textInput = React.createRef();\n\n  const handleClick = (event) => {\n    addGuess(event)\n    textInput.current.focus()\n    // window.scrollTo(0, textInput);\n  }\n\n  return <div className={styles.container}>\n    <div className={styles.guess}><input ref={textInput} autoFocus type='number' className={styles.input} value={a} onChange={setInput('a')}/></div>\n    <div className={styles.guess}><input type='number' className={styles.input} value={b} onChange={setInput('b')}/></div>\n    <div className={styles.guess}><input type='number' className={styles.input} value={c} onChange={setInput('c')}/></div>\n    <div className={styles.guess}><button className={styles.button} onClick={handleClick}>?</button></div>\n  </div>\n}\n\nexport default AddGuessContainer;\n","// @flow\nimport * as React from 'react';\nimport styles from './App.module.css';\nimport Guess from './Guess'\nimport type GuessType from './Guess';\nimport AddGuess from './AddGuess'\n\ntype State = {\n  guesses: Array<GuessType>\n};\n\nclass App extends React.Component<{}, State> {\n  state = {\n    guesses: [\n      [2, 4, 8, true]\n    ]\n  }\n  addGuess = (a, b, c) => this.setState(state => ({ guesses: [...state.guesses, [a, b, c, a < b]]}))\n\n  render() {\n    return (\n      <div className={styles.container}>\n        {this.state.guesses.map((guess, i) => <Guess key={i} guess={guess}/>)}\n        <AddGuess addGuess={this.addGuess} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3wJDT\"};"],"sourceRoot":""}